<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Jules Fouchy Blog</title>
        <link>https://julesfouchy.github.io/home/blog</link>
        <description>Jules Fouchy Blog</description>
        <lastBuildDate>Fri, 19 Mar 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Golden White Noise]]></title>
            <link>https://julesfouchy.github.io/home/blog/2021/03/19/golden-white-noise</link>
            <guid>/2021/03/19/golden-white-noise</guid>
            <pubDate>Fri, 19 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Every person interested in rendering through fragment shaders has already come across a function like this to generate some white noise:]]></description>
            <content:encoded><![CDATA[<p>Every person interested in rendering through fragment shaders has already come across a function like this to generate some white noise:</p><div class="codeBlockContainer_I0IT language-glsl theme-code-block"><div class="codeBlockContent_wNvx glsl"><pre tabindex="0" class="prism-code language-glsl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">float random(vec2 uv) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return fract(sin(dot(uv ,vec2(12.9898,78.233))) * 43758.5453);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>And I used it too, until someone pointed out a big problem to me: on her device my artworks were all messed up! And it turned
out that many people were actually encountering the same problem. (You can see the artifacts in the comparison at the end)</p><p>After a bit of investigation I tracked it down to the <code>random</code> function that was not producing reliable results!
It turned out that depending on the precision of floats supported by your GPU the results were different. For low precision floats the quality of the distribution gets noticeably degraded.</p><p>And at this moment I remembered that guy at the bottom of a StackOverflow discussion claiming that his <code>Gold Noise</code> was much better.
And guess what, he was right! So thank you Dominic Cerisano for this lovely piece of code!</p><div class="codeBlockContainer_I0IT language-glsl theme-code-block"><div class="codeBlockContent_wNvx glsl"><pre tabindex="0" class="prism-code language-glsl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">// Gold Noise ©2015 dcerisano@standard3d.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// - based on the Golden Ratio</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// - uniform normalized distribution</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// - fastest static noise generator function (also runs at low precision)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">float PHI = 1.61803398874989484820459;  // Φ = Golden Ratio   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">float gold_noise(in vec2 xy, in float seed){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="admonition admonition-tip alert alert--success"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</h5></div><div class="admonition-content"><p>Alternatively, you can rely on <a href="https://github.com/ashima/webgl-noise" target="_blank" rel="noopener noreferrer">https://github.com/ashima/webgl-noise</a> for your Perlin / simplex / fractal / <em>etc.</em> noise functions since they don't make use of these pseudorandom number generators.</p></div></div><p>And here is a comparison of the visual results. <code>Gold Noise</code> produces the same (artifact-free) results on all the GPUs I could test with:</p><table><thead><tr><th></th><th>Classic white noise</th><th>Gold Noise</th></tr></thead><tbody><tr><td><strong>Potato GPU</strong></td><td><img alt="classic potato" src="/home/assets/images/classic_potato-132779f4f081fbd883fdc61b5da57c42.png" width="650" height="650"></td><td><img alt="golden potato" src="/home/assets/images/golden_potato-6133e3bbe78d14874c7d00fbe65c85aa.png" width="650" height="650"></td></tr><tr><td><strong>Good GPU</strong></td><td><img alt="classic good" src="/home/assets/images/classic_good-2ca390608a6fb40f51a968da71ee716f.png" width="650" height="650"></td><td><img alt="golden good" src="/home/assets/images/golden_good-89ce89a2396dca3188420e62ec52cb68.png" width="650" height="650"></td></tr></tbody></table><div class="admonition admonition-info alert alert--info"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>Links</h5></div><div class="admonition-content"><p><a href="https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl" target="_blank" rel="noopener noreferrer"><em>The corresponding StackOverflow discussion</em></a><br>
<a href="https://www.shadertoy.com/view/fsf3DN" target="_blank" rel="noopener noreferrer"><em>A live comparison of the different types of white noise</em></a></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>