"use strict";(self.webpackChunkjules_website=self.webpackChunkjules_website||[]).push([[182],{3999:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},assets:function(){return p},toc:function(){return u},default:function(){return f}});var a=n(7462),o=n(3366),r=(n(7294),n(4137)),s=["components"],i={title:"Hijacking the Dereference Operators",authors:"jules"},l=void 0,c={permalink:"/home2/blog/2021/05/26/hijacking-the-dereference-operators",source:"@site/blog/2021-05-26-hijacking-the-dereference-operators.md",title:"Hijacking the Dereference Operators",description:"I often end up writting classes that wrap other classes or primitive types.",date:"2021-05-26T00:00:00.000Z",formattedDate:"May 26, 2021",tags:[],readingTime:2.33,truncated:!0,authors:[{name:"Jules Fouchy",title:"Cool developer & cool developer",url:"https://julesfouchy.github.io/home/",imageURL:"https://github.com/julesfouchy.png",key:"jules"}],prevItem:{title:"Unit Type-System",permalink:"/home2/blog/2021/05/28/unit-type-system"}},p={authorsImageUrls:[void 0]},u=[],d={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"I often end up writting classes that wrap other classes or primitive types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct MyData {\n      float field1;\n      float field2;\n      float field3;\n      float field4;\n      float field5;\n\n      void do_something();\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyDataWrapper {\npublic:\n      void do_something_else();\n\nprivate:\n      MyData _my_data;\n};\n")),(0,r.kt)("p",null,"And for a long time I was annoyed when needing to access the underlying wrapped class. At first I was writting one getter function for each method or field of the wrapped class that I still needed to access."))}f.isMDXComponent=!0}}]);